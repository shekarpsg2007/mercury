package com.humedica.mercury.etl.athena.util

import com.humedica.mercury.etl.core.engine.EntitySource
import org.apache.spark.sql.DataFrame
import org.apache.spark.sql.functions._
import org.apache.spark.sql.expressions.Window
import com.humedica.mercury.etl.core.engine.Constants._
import com.humedica.mercury.etl.core.engine.Functions._


class UtilDedupedPatient (config: Map[String, String]) extends EntitySource(config: Map[String, String]) {

  cacheMe = true

  columns = List("ADDRESS", "ADDRESS_2", "AGRICULTURAL_WORKER", "AGRICULTURAL_WORKER_TYPES", "CDC_ETHNICITY_CODE",
    "CDC_RACE_CODE", "CITY", "CONSENT_TO_CALL_EFF_DATE", "CONSENT_TO_CALL_FLAG", "CONSENT_TO_TEXT_YN", "CONTACT_PREFERENCE",
    "CONTEXT_ID", "CONTEXT_NAME", "CONTEXT_PARENTCONTEXTID", "CURRENT_DEPARTMENT_ID", "DECEASED_DATE",
    "DEFAULT_PRESCRIPTION_PROV_ID", "DOB", "DO_NOT_CALL_Y_N", "EMAIL", "EMERGENCY_CONTACT_NAME", "EMERGENCY_CONTACT_PHONE",
    "EMERGENCY_CONTACT_RELATIONSHIP", "ENTERPRISE_ID", "ETHNICITY", "FILEID", "FIRST_NAME", "GENDER_IDENTITY",
    "GUARANTOR_ADDRESS", "GUARANTOR_ADDRESS_2", "GUARANTOR_CITY", "GUARANTOR_DOB", "GUARANTOR_EMPLOYER_ID",
    "GUARANTOR_FIRST_NAME", "GUARANTOR_LAST_NAME", "GUARANTOR_MIDDLE_INITIAL", "GUARANTOR_NAME_SUFFIX", "GUARANTOR_PHONE",
    "GUARANTOR_RELATIONSHIP", "GUARANTOR_SSN", "GUARANTOR_STATE", "GUARANTOR_ZIP", "GUARDIAN_FIRST_NAME", "GUARDIAN_LAST_NAME",
    "GUARDIAN_MIDDLE_INITIAL", "GUARDIAN_NAME_SUFFIX", "HOLD_STATEMENT_REASON", "HOMELESS_STATUS", "HOMELESS_STATUS_TYPES",
    "HUM_LANGUAGE", "HUM_STATE", "INSURED_SIG_EFFECTIVE_DATE", "INSURED_SIG_EXPIRATION_DATE", "INSURED_SIG_ON_FILE_FLAG",
    "ISO_639_2_CODE", "LAST_NAME", "MARITAL_STATUS", "MIDDLE_INITIAL", "MOBILE_PHONE", "NAME_SUFFIX", "NEW_PATIENT_ID",
    "OCCUPATION", "PATIENT_EMPLOYER_ID", "PATIENT_HOME_PHONE", "PATIENT_ID", "PATIENT_LAST_SEEN_DATE", "PATIENT_SIG_EFFECTIVE_DATE",
    "PATIENT_SIG_EXPIRATION_DATE", "PATIENT_SIG_ON_FILE_FLAG", "PATIENT_SSN", "PATIENT_STATUS", "PREFERRED_LAB_ID",
    "PRIMARY_PROVIDER_ID", "PRIVACY_NOTICE_GIVEN_BY", "PRIVACY_NOTICE_GIVEN_DATE", "PRIVACY_NOTICE_GIVEN_DEPT_ID",
    "PRIVACY_NOTICE_GIVEN_FLAG", "PRIV_NOTICE_NOT_GIVEN_NOTE", "PRIV_NOTICE_NOT_GIVEN_REASON", "PROVIDER_GROUP_ID",
    "PUBLIC_HOUSING", "RACE", "REFERRAL_SOURCE", "REFERRAL_SOURCE_OTHER", "REGISTRATION_DATE", "REGISTRATION_DEPARTMENT_ID",
    "SCHOOL_BASED_HEALTH_CENTER_PNT", "SELFPAY_RESTRICTION_Y_N", "SEX", "SEXUAL_ORIENTATION", "TEST_PATIENT_YN",
    "UNCONFIRMED_FAMILY_SIZE", "UNCONFIRMED_FAMILY_SZE_DECL_YN", "UNCONFIRMED_INCOME_DECLINED_YN", "UNCONFIRMED_PAY_PERIOD",
    "UNCONFIRMED_POVERTY_LEVEL", "UNCONFIRMED_YEARLY_INCOME", "UNCONF_INCOME_PER_PAY_PERIOD", "VETERAN_STATUS", "WORK_PHONE", "ZIP", "FILEDATE")

  tables = List("patient",
    "fileExtractDates:athena.util.UtilFileIdDates",
    "pat:athena.util.UtilSplitPatient")

  columnSelect = Map(
    "patient" -> List("ADDRESS", "ADDRESS_2", "AGRICULTURAL_WORKER", "AGRICULTURAL_WORKER_TYPES", "CDC_ETHNICITY_CODE",
      "CDC_RACE_CODE", "CITY", "CONSENT_TO_CALL_EFF_DATE", "CONSENT_TO_CALL_FLAG", "CONSENT_TO_TEXT_YN", "CONTACT_PREFERENCE",
      "CONTEXT_ID", "CONTEXT_NAME", "CONTEXT_PARENTCONTEXTID", "CURRENT_DEPARTMENT_ID", "DECEASED_DATE",
      "DEFAULT_PRESCRIPTION_PROV_ID", "DOB", "DO_NOT_CALL_Y_N", "EMAIL", "EMERGENCY_CONTACT_NAME", "EMERGENCY_CONTACT_PHONE",
      "EMERGENCY_CONTACT_RELATIONSHIP", "ENTERPRISE_ID", "ETHNICITY", "FILEID", "FIRST_NAME", "GENDER_IDENTITY",
      "GUARANTOR_ADDRESS", "GUARANTOR_ADDRESS_2", "GUARANTOR_CITY", "GUARANTOR_DOB", "GUARANTOR_EMPLOYER_ID",
      "GUARANTOR_FIRST_NAME", "GUARANTOR_LAST_NAME", "GUARANTOR_MIDDLE_INITIAL", "GUARANTOR_NAME_SUFFIX", "GUARANTOR_PHONE",
      "GUARANTOR_RELATIONSHIP", "GUARANTOR_SSN", "GUARANTOR_STATE", "GUARANTOR_ZIP", "GUARDIAN_FIRST_NAME", "GUARDIAN_LAST_NAME",
      "GUARDIAN_MIDDLE_INITIAL", "GUARDIAN_NAME_SUFFIX", "HOLD_STATEMENT_REASON", "HOMELESS_STATUS", "HOMELESS_STATUS_TYPES",
      "HUM_LANGUAGE", "HUM_STATE", "INSURED_SIG_EFFECTIVE_DATE", "INSURED_SIG_EXPIRATION_DATE", "INSURED_SIG_ON_FILE_FLAG",
      "ISO_639_2_CODE", "LAST_NAME", "MARITAL_STATUS", "MIDDLE_INITIAL", "MOBILE_PHONE", "NAME_SUFFIX", "NEW_PATIENT_ID",
      "OCCUPATION", "PATIENT_EMPLOYER_ID", "PATIENT_HOME_PHONE", "PATIENT_ID", "PATIENT_LAST_SEEN_DATE", "PATIENT_SIG_EFFECTIVE_DATE",
      "PATIENT_SIG_EXPIRATION_DATE", "PATIENT_SIG_ON_FILE_FLAG", "PATIENT_SSN", "PATIENT_STATUS", "PREFERRED_LAB_ID",
      "PRIMARY_PROVIDER_ID", "PRIVACY_NOTICE_GIVEN_BY", "PRIVACY_NOTICE_GIVEN_DATE", "PRIVACY_NOTICE_GIVEN_DEPT_ID",
      "PRIVACY_NOTICE_GIVEN_FLAG", "PRIV_NOTICE_NOT_GIVEN_NOTE", "PRIV_NOTICE_NOT_GIVEN_REASON", "PROVIDER_GROUP_ID",
      "PUBLIC_HOUSING", "RACE", "REFERRAL_SOURCE", "REFERRAL_SOURCE_OTHER", "REGISTRATION_DATE", "REGISTRATION_DEPARTMENT_ID",
      "SCHOOL_BASED_HEALTH_CENTER_PNT", "SELFPAY_RESTRICTION_Y_N", "SEX", "SEXUAL_ORIENTATION", "TEST_PATIENT_YN",
      "UNCONFIRMED_FAMILY_SIZE", "UNCONFIRMED_FAMILY_SZE_DECL_YN", "UNCONFIRMED_INCOME_DECLINED_YN", "UNCONFIRMED_PAY_PERIOD",
      "UNCONFIRMED_POVERTY_LEVEL", "UNCONFIRMED_YEARLY_INCOME", "UNCONF_INCOME_PER_PAY_PERIOD", "VETERAN_STATUS", "WORK_PHONE", "ZIP"),
    "fileExtractDates" -> List("FILEID","FILEDATE"),
    "pat" -> List("PATIENT_ID")
  )

  join = (dfs: Map[String, DataFrame]) => {
    val patJoinType = new UtilSplitTable(config).patprovJoinType
    dfs("patient")
      .join(dfs("fileExtractDates"), Seq("FILEID"), "left_outer")
      .join(dfs("pat"), Seq("PATIENT_ID"), patJoinType)
  }


  afterJoin = (df: DataFrame) => {
    val groups = Window.partitionBy(df("PATIENT_ID"))
      .orderBy(df("FILEDATE").desc_nulls_last, df("FILEID").desc_nulls_last)
    df.withColumn("dedupe_row", row_number.over(groups))
      .filter("dedupe_row = 1")
  }

}
